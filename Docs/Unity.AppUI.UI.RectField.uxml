<?xml version="1.0" encoding="utf-8"?>
<engine:UXML
  xmlns:engine="UnityEngine.UIElements"
  xmlns:appui="Unity.AppUI.UI"
  xmlns:navigation="Unity.AppUI.Navigation"
>
  <engine:VisualElement name="Unity.AppUI.UI.RectField" class="main">
    <engine:Label text="RectField" class="title" />
    <engine:Label
      text="A specialized input field for editing Unity Rect values with position and size components"
      class="subtitle"
    />
    <engine:Label text="input" class="category" />
    <engine:VisualElement class="content">
      <engine:VisualElement class="section">
        <engine:VisualElement class="overview">
          <engine:Label
            text="The RectField component provides a specialized input interface for editing Unity Rect values. It breaks down the rect into its four components - X, Y (position) and Width, Height (size) - making it easier to edit rect values in a structured way."
            class="parapgraph"
          />
          <engine:Label
            text="The field is organized in two rows - one for position (X,Y) and one for size (Width,Height) - each with clear labels and numeric inputs. Each numeric component is implemented as a FloatField, providing precise control over the values."
            class="parapgraph"
          />
          <engine:Label
            text="All numeric inputs support keyboard input, validation, and optional value constraints. The component maintains the integrity of the Rect structure while allowing independent editing of its components."
            class="parapgraph"
          />
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="props">
          <engine:VisualElement class="prop">
            <engine:Label text="value" class="prop-name" />
            <engine:Label text="Rect" class="prop-type" />
            <engine:Label text="Rect.zero" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="The current Rect value of the field. This property represents the complete rectangle with its position (x,y) and size (width,height) components."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting a basic rect value"
                  class="scenario-description"
                />
                <engine:Label
                  text="var rectField = new RectField();
rectField.value = new Rect(10, 20, 100, 50); // Sets x=10, y=20, width=100, height=50"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="size" class="prop-name" />
            <engine:Label text="Size" class="prop-type" />
            <engine:Label text="Size.M" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls the visual size of the RectField component. This affects the overall dimensions of the input fields and labels."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Creating a small RectField"
                  class="scenario-description"
                />
                <engine:Label
                  text="var rectField = new RectField();
rectField.size = Size.S;"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="invalid" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="false" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Indicates whether the current value is invalid according to the validation rules. When true, the field will display in an error state."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting up validation for positive values only"
                  class="scenario-description"
                />
                <engine:Label
                  text="rectField.validateValue = (rect) =&gt; rect.width &gt; 0 &amp;&amp; rect.height &gt; 0;
// The field will show as invalid if width or height is negative"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="validateValue" class="prop-name" />
            <engine:Label text="Func&lt;Rect, bool&gt;" class="prop-type" />
            <engine:Label text="null" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="False" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="A function that validates the Rect value. Returns true if the value is valid, false otherwise."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Implementing a custom validation function"
                  class="scenario-description"
                />
                <engine:Label
                  text="rectField.validateValue = (rect) =&gt; {
    // Ensure rect is within screen bounds
    return rect.x &gt;= 0 &amp;&amp; rect.y &gt;= 0 &amp;&amp;
           rect.width &lt;= Screen.width &amp;&amp;
           rect.height &lt;= Screen.height;
};"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="examples">
          <engine:VisualElement class="example">
            <engine:Label text="Basic RectField Usage" class="parapgraph" />
            <engine:Label
              text='// Create a new RectField
var rectField = new RectField();

// Set initial value
rectField.value = new Rect(0, 0, 100, 100);

// Register for value changes
rectField.RegisterValueChangedCallback(evt =&gt; {
    Debug.Log($"New rect: {evt.newValue}");
});'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label text="RectField with Validation" class="parapgraph" />
            <engine:Label
              text='var rectField = new RectField();

// Set up validation for positive values within bounds
rectField.validateValue = (rect) =&gt; {
    return rect.width &gt; 0 &amp;&amp; rect.height &gt; 0 &amp;&amp;
           rect.x &gt;= 0 &amp;&amp; rect.y &gt;= 0 &amp;&amp;
           rect.x + rect.width &lt;= Screen.width &amp;&amp;
           rect.y + rect.height &lt;= Screen.height;
};

// Handle invalid values
rectField.RegisterCallback&lt;ChangeEvent&lt;Rect&gt;&gt;(evt =&gt; {
    if (rectField.invalid)
    {
        Debug.LogWarning("Invalid rectangle dimensions");
    }
});'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label text="UXML Usage Example" class="parapgraph" />
            <engine:Label
              text='&lt;UXML xmlns:ui="UnityEngine.UIElements" xmlns:appui="Unity.AppUI.UI"&gt;
    &lt;appui:RectField
        size="M"
        value="0, 0, 100, 100"
        style="width: 300px;"/&gt;
&lt;/UXML&gt;'
              class="code"
            />
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
    </engine:VisualElement>
  </engine:VisualElement>
</engine:UXML>
