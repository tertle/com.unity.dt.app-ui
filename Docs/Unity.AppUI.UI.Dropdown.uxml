<?xml version="1.0" encoding="utf-8"?>
<engine:UXML
  xmlns:engine="UnityEngine.UIElements"
  xmlns:appui="Unity.AppUI.UI"
  xmlns:navigation="Unity.AppUI.Navigation"
>
  <engine:VisualElement name="Unity.AppUI.UI.Dropdown" class="main">
    <engine:Label text="Dropdown" class="title" />
    <engine:Label
      text="A form control that lets users select a value from a list of options"
      class="subtitle"
    />
    <engine:Label text="input" class="category" />
    <engine:VisualElement class="content">
      <engine:VisualElement class="section">
        <engine:VisualElement class="overview">
          <engine:Label
            text="The Dropdown component presents a list of options that users can choose from. It appears as a button that, when clicked, shows a list of selectable options in a popup menu."
            class="parapgraph"
          />
          <engine:Label
            text="Dropdowns are useful when you need to provide users with a set of predefined options while conserving screen space. They're commonly used in forms, settings panels, and configuration interfaces."
            class="parapgraph"
          />
          <engine:Label
            text="The component supports both single and multiple selection modes, making it versatile for different use cases."
            class="parapgraph note"
          />
          <engine:Label
            text="For the best user experience, consider the following guidelines:"
            class="parapgraph tip"
          />
          <engine:Label
            text="• Use Dropdown when you have 3-10 options. For fewer options, consider using Radio Buttons or Toggle Buttons. For more options, consider using a searchable ComboBox."
            class="parapgraph"
          />
          <engine:Label
            text="• Order the options in a logical way (e.g., alphabetically, numerically, or by frequency of use)"
            class="parapgraph"
          />
          <engine:Label
            text="• Use clear, concise labels for options"
            class="parapgraph"
          />
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="props">
          <engine:VisualElement class="prop">
            <engine:Label text="bindTitle" class="prop-name" />
            <engine:Label
              text="Action&lt;DropdownItem, IEnumerable&lt;int&gt;&gt;"
              class="prop-type"
            />
            <engine:Label text="null" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="False" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="A method that will be called to bind the title of the dropdown. This allows customizing how the selected value(s) are displayed in the dropdown button."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Customizing the dropdown title to show the number of selected items"
                  class="scenario-description"
                />
                <engine:Label
                  text='dropdown.bindTitle = (item, indices) =&gt; {
    item.label = "Selected: " + indices.Count + " items";
};'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="closeOnSelection" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="true" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls whether the dropdown menu automatically closes after an item is selected."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Keep the dropdown menu open after selection (useful for multiple selection mode)"
                  class="scenario-description"
                />
                <engine:Label
                  text='&lt;ui:Dropdown close-on-selection="false" /&gt;'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="selectionType" class="prop-name" />
            <engine:Label text="PickerSelectionType" class="prop-type" />
            <engine:Label
              text="PickerSelectionType.Single"
              class="prop-value"
            />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Determines whether the dropdown allows single or multiple selection."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Creating a multi-select dropdown"
                  class="scenario-description"
                />
                <engine:Label
                  text='&lt;ui:Dropdown selection-type="Multiple" /&gt;'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="size" class="prop-name" />
            <engine:Label text="Size" class="prop-type" />
            <engine:Label text="Size.M" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls the size of the dropdown button. Available options are: XS, S, M, L, XL"
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Creating a large dropdown button"
                  class="scenario-description"
                />
                <engine:Label
                  text='&lt;ui:Dropdown size="L" /&gt;'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="emphasized" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="false" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="When true, applies emphasized styling to the dropdown button for higher visual prominence."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Creating an emphasized dropdown button"
                  class="scenario-description"
                />
                <engine:Label
                  text='&lt;ui:Dropdown emphasized="true" /&gt;'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="examples">
          <engine:VisualElement class="example">
            <engine:Label text="Basic Dropdown" class="parapgraph" />
            <engine:Label
              text="Creating a simple dropdown with string options"
              class="scenario-description"
            />
            <engine:Label
              text='// Create a basic dropdown with string items
var dropdown = new Dropdown();
var items = new List&lt;string&gt; { "Option 1", "Option 2", "Option 3" };
dropdown.sourceItems = items;

// Add it to your UI
root.Add(dropdown);'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Multiple Selection Dropdown"
              class="parapgraph"
            />
            <engine:Label
              text="Creating a multiple selection dropdown with custom handling of selection changes"
              class="scenario-description"
            />
            <engine:Label
              text='var dropdown = new Dropdown {
    selectionType = PickerSelectionType.Multiple,
    closeOnSelection = false,
    defaultMessage = "Select options"
};

var items = new List&lt;string&gt; { "Red", "Green", "Blue" };
dropdown.sourceItems = items;

// Handle selection changes
dropdown.RegisterValueChangedCallback(evt =&gt; {
    var selectedIndices = evt.newValue;
    Debug.Log($"Selected {selectedIndices.Count()} items");
});'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label text="Custom Item Binding" class="parapgraph" />
            <engine:Label
              text="Creating a dropdown with custom item binding and display"
              class="scenario-description"
            />
            <engine:Label
              text='var dropdown = new Dropdown();

// Custom class for items
class ColorOption {
    public string Name { get; set; }
    public Color Color { get; set; }
}

var items = new List&lt;ColorOption&gt; {
    new ColorOption { Name = "Red", Color = Color.red },
    new ColorOption { Name = "Green", Color = Color.green }
};

dropdown.sourceItems = items;
dropdown.bindItem = (item, index) =&gt; {
    var colorOption = items[index] as ColorOption;
    item.label = colorOption.Name;
};

dropdown.bindTitle = (item, indices) =&gt; {
    if (indices.Count() == 0)
        item.label = "Select a color";
    else
        item.label = (items[indices.First()] as ColorOption).Name;
};'
              class="code"
            />
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
    </engine:VisualElement>
  </engine:VisualElement>
</engine:UXML>
