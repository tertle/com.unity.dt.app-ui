<?xml version="1.0" encoding="utf-8"?>
<engine:UXML
  xmlns:engine="UnityEngine.UIElements"
  xmlns:appui="Unity.AppUI.UI"
  xmlns:navigation="Unity.AppUI.Navigation"
>
  <engine:VisualElement name="Unity.AppUI.UI.Picker" class="main">
    <engine:Label text="Picker" class="title" />
    <engine:Label
      text="A customizable UI component for selecting one or multiple items from a list"
      class="subtitle"
    />
    <engine:Label text="input" class="category" />
    <engine:VisualElement class="content">
      <engine:VisualElement class="section">
        <engine:VisualElement class="overview">
          <engine:Label
            text="The Picker component provides a flexible way to present users with a list of selectable options. It supports both single and multiple selection modes, making it suitable for various use cases."
            class="parapgraph"
          />
          <engine:Label
            text="When clicked, the Picker displays a menu containing the available options. Users can select items from this menu, and the selection is reflected in the Picker's title area."
            class="parapgraph"
          />
          <engine:Label
            text="The component is highly customizable through its various properties and can be styled using USS classes. It supports both keyboard navigation and mouse interaction."
            class="parapgraph"
          />
          <engine:Label
            text="NOTE: The Picker is an abstract base class. For implementation, use concrete classes like Dropdown that inherit from Picker."
            class="parapgraph note"
          />
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="props">
          <engine:VisualElement class="prop">
            <engine:Label text="closeOnSelection" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="true" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Determines whether the picker menu should automatically close when an item is selected."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Keep the picker menu open for multiple selections"
                  class="scenario-description"
                />
                <engine:Label
                  text="picker.closeOnSelection = false;
// Menu will stay open after selection, allowing multiple selections without reopening"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="defaultMessage" class="prop-name" />
            <engine:Label text="string" class="prop-type" />
            <engine:Label text='"Select"' class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="The message displayed in the picker when no item is selected."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Customize the default placeholder message"
                  class="scenario-description"
                />
                <engine:Label
                  text='picker.defaultMessage = "Choose an option...";
// Changes the default placeholder text'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="selectionType" class="prop-name" />
            <engine:Label text="PickerSelectionType" class="prop-type" />
            <engine:Label
              text="PickerSelectionType.Single"
              class="prop-value"
            />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Defines whether the picker allows single or multiple selection."
                class="parapgraph"
              />
              <engine:Label text="Available values:" class="parapgraph note" />
              <engine:Label
                text="- Single: Only one item can be selected at a time"
                class="parapgraph note"
              />
              <engine:Label
                text="- Multiple: Multiple items can be selected simultaneously"
                class="parapgraph note"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Enable multiple selection mode"
                  class="scenario-description"
                />
                <engine:Label
                  text="picker.selectionType = PickerSelectionType.Multiple;
// Enables multi-select mode"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="size" class="prop-name" />
            <engine:Label text="Size" class="prop-type" />
            <engine:Label text="Size.M" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls the size of the picker component."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Change the picker size to large"
                  class="scenario-description"
                />
                <engine:Label
                  text="picker.size = Size.L;
// Makes the picker larger"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="emphasized" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="false" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="When true, applies an emphasized visual style to the picker."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Enable emphasized mode for stronger visual presence"
                  class="scenario-description"
                />
                <engine:Label
                  text="picker.emphasized = true;
// Applies emphasized styling"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="sourceItems" class="prop-name" />
            <engine:Label text="IList" class="prop-type" />
            <engine:Label text="null" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="False" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="The collection of items to display in the picker menu."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Set the items to be displayed in the picker"
                  class="scenario-description"
                />
                <engine:Label
                  text='var items = new List&lt;string&gt; { "Option 1", "Option 2", "Option 3" };
picker.sourceItems = items;'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="value" class="prop-name" />
            <engine:Label text="IEnumerable&lt;int&gt;" class="prop-type" />
            <engine:Label text="Empty collection" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="False" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Gets or sets the currently selected item indices."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Set multiple selected items"
                  class="scenario-description"
                />
                <engine:Label
                  text="// Select the first and third items in a multi-select picker
picker.value = new[] { 0, 2 };"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="examples">
          <engine:VisualElement class="example">
            <engine:Label
              text="Create a basic single-select picker with string items"
              class="scenario-description"
            />
            <engine:Label
              text='// Create a basic single-select picker
var picker = new Dropdown();
picker.sourceItems = new List&lt;string&gt; { "Small", "Medium", "Large" };
picker.defaultMessage = "Select size...";
picker.selectedIndex = 1; // Select "Medium" by default'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Create a multi-select picker with custom item binding"
              class="scenario-description"
            />
            <engine:Label
              text='// Create a multi-select picker with custom binding
var picker = new Dropdown();
var items = new List&lt;string&gt; { "Red", "Green", "Blue" };

picker.sourceItems = items;
picker.selectionType = PickerSelectionType.Multiple;
picker.bindItem = (item, index) =&gt; {
    item.label = items[index];
};
picker.value = new[] { 0, 2 }; // Select "Red" and "Blue"'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Create a picker with validation and change event handling"
              class="scenario-description"
            />
            <engine:Label
              text='// Create a picker with validation
var picker = new Dropdown();
picker.sourceItems = new List&lt;string&gt; { "Option 1", "Option 2", "Option 3" };
picker.validateValue = (values) =&gt; {
    // Require at least one selection
    return values.Any();
};
picker.RegisterValueChangedCallback(evt =&gt; {
    Debug.Log($"Selection changed: {string.Join(", ", evt.newValue)}");
});'
              class="code"
            />
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
    </engine:VisualElement>
  </engine:VisualElement>
</engine:UXML>
