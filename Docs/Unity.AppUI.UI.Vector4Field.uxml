<?xml version="1.0" encoding="utf-8"?>
<engine:UXML
  xmlns:engine="UnityEngine.UIElements"
  xmlns:appui="Unity.AppUI.UI"
  xmlns:navigation="Unity.AppUI.Navigation"
>
  <engine:VisualElement name="Unity.AppUI.UI.Vector4Field" class="main">
    <engine:Label text="Vector4Field" class="title" />
    <engine:Label
      text="A field control that allows users to edit a Vector4 value by inputting its X, Y, Z and W components."
      class="subtitle"
    />
    <engine:Label text="input" class="category" />
    <engine:VisualElement class="content">
      <engine:VisualElement class="section">
        <engine:VisualElement class="overview">
          <engine:Label
            text="The Vector4Field is a specialized input control that allows users to edit a Vector4 value through four separate numerical fields representing its X, Y, Z and W components. It's particularly useful for handling 4D vectors or when you need to input quaternion values."
            class="parapgraph"
          />
          <engine:Label
            text="The field is organized in a 2x2 grid layout with clearly labeled inputs for each component. Each component field supports numerical input with floating-point precision and can be individually edited."
            class="parapgraph"
          />
          <engine:Label
            text="Key features:"
            class="parapgraph feature-list-header"
          />
          <engine:Label
            text="• Individual floating-point input fields for X, Y, Z, and W components
• Support for value validation
• Customizable number formatting
• Different size variants
• Support for UXML integration"
            class="parapgraph"
          />
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="props">
          <engine:VisualElement class="prop">
            <engine:Label text="value" class="prop-name" />
            <engine:Label text="Vector4" class="prop-type" />
            <engine:Label text="Vector4.zero" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="The Vector4 value represented by this field. Changes to this value will update all four component fields (X, Y, Z, W)."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting the Vector4Field value programmatically"
                  class="scenario-description"
                />
                <engine:Label
                  text="vector4Field.value = new Vector4(1.0f, 2.0f, 3.0f, 4.0f);"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="size" class="prop-name" />
            <engine:Label text="Size" class="prop-type" />
            <engine:Label text="Size.M" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls the size variant of the Vector4Field. Available options are defined in the Size enum."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting the Vector4Field to use the large size variant"
                  class="scenario-description"
                />
                <engine:Label text="vector4Field.size = Size.L;" class="code" />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="formatString" class="prop-name" />
            <engine:Label text="string" class="prop-type" />
            <engine:Label text="null" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="The format string used to format the numerical values in each component field. This follows the standard .NET numeric format strings."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting the Vector4Field to display numbers with 2 decimal places"
                  class="scenario-description"
                />
                <engine:Label
                  text='vector4Field.formatString = "F2";'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="formatFunction" class="prop-name" />
            <engine:Label
              text="FormatFunction&lt;float&gt;"
              class="prop-type"
            />
            <engine:Label text="null" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="False" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="A custom function to format the numerical values in each component field. This allows for more complex formatting logic than what's possible with format strings."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Using a custom format function to add units to the displayed values"
                  class="scenario-description"
                />
                <engine:Label
                  text='vector4Field.formatFunction = (float value) =&gt; $"{value:0.##}u";'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="invalid" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="false" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Indicates whether the current value is invalid according to the validation rules. This property can be used to provide visual feedback when the input is invalid."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting the invalid state based on a magnitude check"
                  class="scenario-description"
                />
                <engine:Label
                  text="vector4Field.invalid = vector4Field.value.magnitude &gt; 1.0f;"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="validateValue" class="prop-name" />
            <engine:Label text="Func&lt;Vector4, bool&gt;" class="prop-type" />
            <engine:Label text="null" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="False" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="A function that validates the Vector4 value. Return true if the value is valid, false otherwise."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Setting up validation to ensure the vector's magnitude doesn't exceed 1"
                  class="scenario-description"
                />
                <engine:Label
                  text="vector4Field.validateValue = (Vector4 v) =&gt; v.magnitude &lt;= 1.0f;"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="examples">
          <engine:VisualElement class="example">
            <engine:Label text="Basic usage with UXML:" class="parapgraph" />
            <engine:Label
              text="Basic UXML declaration of a Vector4Field"
              class="scenario-description"
            />
            <engine:Label
              text='&lt;ui:Vector4Field name="myVector4Field"
               size="M"
               value="1 2 3 4"
               format-string="F2" /&gt;'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Code example showing various features:"
              class="parapgraph"
            />
            <engine:Label
              text="Creating and configuring a Vector4Field in code"
              class="scenario-description"
            />
            <engine:Label
              text='var vector4Field = new Vector4Field {
    value = new Vector4(1, 2, 3, 4),
    size = Size.M,
    formatString = "F2",
    validateValue = (v) =&gt; v.magnitude &lt;= 1.0f
};

vector4Field.RegisterValueChangedCallback(evt =&gt; {
    Debug.Log($"New value: {evt.newValue}");
});

container.Add(vector4Field);'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Using with validation and custom formatting:"
              class="parapgraph"
            />
            <engine:Label
              text="Advanced setup with custom formatting and validation"
              class="scenario-description"
            />
            <engine:Label
              text='var vector4Field = new Vector4Field();

// Custom format function
vector4Field.formatFunction = (float value) =&gt; $"{value:0.##}u";

// Validation function
vector4Field.validateValue = (Vector4 v) =&gt; {
    return v.x &gt;= 0 &amp;&amp; v.y &gt;= 0 &amp;&amp; v.z &gt;= 0 &amp;&amp; v.w &gt;= 0;
};

// Register change callback
vector4Field.RegisterValueChangedCallback(evt =&gt; {
    if (!vector4Field.invalid) {
        ApplyVector4Value(evt.newValue);
    }
});'
              class="code"
            />
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
    </engine:VisualElement>
  </engine:VisualElement>
</engine:UXML>
