<?xml version="1.0" encoding="utf-8"?>
<engine:UXML
  xmlns:engine="UnityEngine.UIElements"
  xmlns:appui="Unity.AppUI.UI"
  xmlns:navigation="Unity.AppUI.Navigation"
>
  <engine:VisualElement name="Unity.AppUI.UI.AlertDialog" class="main">
    <engine:Label text="AlertDialog" class="title" />
    <engine:Label
      text="A dialog that interrupts the user's workflow to communicate an important message and acquire a response."
      class="subtitle"
    />
    <engine:Label text="action" class="category" />
    <engine:VisualElement class="content">
      <engine:VisualElement class="section">
        <engine:VisualElement class="overview">
          <engine:Label
            text="Alert dialogs interrupt users with urgent information, details, or actions. They are displayed on top of the current window using a Modal component and require user interaction to be dismissed."
            class="parapgraph"
          />
          <engine:Label
            text="Alert dialogs are used for:"
            class="parapgraph list-intro"
          />
          <engine:Label
            text="• Interrupting workflows with critical information or requiring decisions"
            class="parapgraph list-item"
          />
          <engine:Label
            text="• Getting user confirmation before destructive actions"
            class="parapgraph list-item"
          />
          <engine:Label
            text="• Displaying important error, warning or success messages"
            class="parapgraph list-item"
          />
          <engine:Label
            text="The AlertDialog component supports different semantic variants to convey the nature of the dialog: Default, Confirmation, Information, Destructive, Error, and Warning."
            class="parapgraph note"
          />
          <engine:Label
            text="AlertDialogs can have up to three actions:"
            class="parapgraph list-intro"
          />
          <engine:Label
            text="• Primary action (Required): The main action that confirms or accepts"
            class="parapgraph list-item"
          />
          <engine:Label
            text="• Secondary action (Optional): An alternative action"
            class="parapgraph list-item"
          />
          <engine:Label
            text="• Cancel action (Optional): Allows users to dismiss the dialog"
            class="parapgraph list-item"
          />
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="props">
          <engine:VisualElement class="prop">
            <engine:Label text="variant" class="prop-name" />
            <engine:Label text="AlertSemantic" class="prop-type" />
            <engine:Label text="AlertSemantic.Default" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Defines the semantic meaning and visual styling of the alert dialog. Available variants:"
                class="parapgraph"
              />
              <engine:Label
                text="• Default: Standard dialog appearance"
                class="parapgraph list-item"
              />
              <engine:Label
                text="• Confirmation: For positive actions or success messages"
                class="parapgraph list-item"
              />
              <engine:Label
                text="• Information: For neutral informational messages"
                class="parapgraph list-item"
              />
              <engine:Label
                text="• Destructive: For dangerous or irreversible actions"
                class="parapgraph list-item"
              />
              <engine:Label
                text="• Error: For error messages or critical issues"
                class="parapgraph list-item"
              />
              <engine:Label
                text="• Warning: For cautionary messages"
                class="parapgraph list-item"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Using destructive variant for a delete confirmation dialog"
                  class="scenario-description"
                />
                <engine:Label
                  text='alertDialog.variant = AlertSemantic.Destructive;
alertDialog.title = "Delete Project";
alertDialog.description = "Are you sure you want to delete this project? This action cannot be undone.";
alertDialog.SetPrimaryAction(1, "Delete", OnDeleteConfirmed);
alertDialog.SetCancelAction(2, "Cancel");'
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="isPrimaryActionDisabled" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="false" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls whether the primary action button is disabled. Use this to prevent users from proceeding when certain conditions are not met."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Disabling primary action based on a condition"
                  class="scenario-description"
                />
                <engine:Label
                  text="// Disable primary action until user agrees to terms
alertDialog.isPrimaryActionDisabled = !userAgreedToTerms;"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
          <engine:VisualElement class="prop">
            <engine:Label text="isSecondaryActionDisabled" class="prop-name" />
            <engine:Label text="bool" class="prop-type" />
            <engine:Label text="false" class="prop-value" />
            <engine:Label text="True" class="prop-code-support support" />
            <engine:Label text="True" class="prop-uxml-support support" />
            <engine:VisualElement class="prop-description">
              <engine:Label
                text="Controls whether the secondary action button is disabled. Use this when the alternative action is temporarily unavailable."
                class="parapgraph"
              />
            </engine:VisualElement>
            <engine:VisualElement class="prop-examples">
              <engine:VisualElement class="example">
                <engine:Label
                  text="Disabling secondary action based on system state"
                  class="scenario-description"
                />
                <engine:Label
                  text="// Disable secondary action based on system state
alertDialog.isSecondaryActionDisabled = !isAlternativeActionAvailable;"
                  class="code"
                />
              </engine:VisualElement>
            </engine:VisualElement>
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
      <engine:VisualElement class="section">
        <engine:VisualElement class="examples">
          <engine:VisualElement class="example">
            <engine:Label
              text="Creating a warning dialog for unsaved changes with multiple actions"
              class="scenario-description"
            />
            <engine:Label
              text='var alertDialog = new AlertDialog();
alertDialog.variant = AlertSemantic.Warning;
alertDialog.title = "Unsaved Changes";
alertDialog.description = "You have unsaved changes. Do you want to save them before leaving?";

alertDialog.SetPrimaryAction(1, "Save", () =&gt; SaveChanges());
alertDialog.SetSecondaryAction(2, "Don&apos;t Save", () =&gt; DiscardChanges());
alertDialog.SetCancelAction(3, "Cancel");

// Show the alert dialog using a modal
Modal.Build(parentElement, alertDialog)
    .SetKeyboardDismiss(true)
    .SetOutsideClickDismiss(false)
    .Show();'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Defining an alert dialog in UXML"
              class="scenario-description"
            />
            <engine:Label
              text='&lt;UXML&gt;
&lt;ui:AlertDialog
    variant="Information"
    title="Update Available"
    description="A new version is available. Would you like to update now?"
    is-primary-action-disabled="false"
    is-secondary-action-disabled="false" /&gt;
&lt;/UXML&gt;'
              class="code"
            />
          </engine:VisualElement>
          <engine:VisualElement class="example">
            <engine:Label
              text="Showing a simple success confirmation dialog"
              class="scenario-description"
            />
            <engine:Label
              text='var confirmationDialog = new AlertDialog();
confirmationDialog.variant = AlertSemantic.Confirmation;
confirmationDialog.title = "Success";
confirmationDialog.description = "Your changes have been saved successfully.";
confirmationDialog.SetPrimaryAction(1, "OK", null);

Modal.Build(parentElement, confirmationDialog)
    .SetKeyboardDismiss(true)
    .Show();'
              class="code"
            />
          </engine:VisualElement>
        </engine:VisualElement>
      </engine:VisualElement>
    </engine:VisualElement>
  </engine:VisualElement>
</engine:UXML>
